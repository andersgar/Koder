#include <Zumo32U4.h>
Zumo32U4LCD lcd;
Zumo32U4LineSensors linesensor;
Zumo32U4ButtonA buttonA;
Zumo32U4Buzzer buzzer;
unsigned int linesensorValues [5];
const int wanted_value = 2000;
const int top_speed = 400;
int teller;
int last_error;

void setup() {
  linesensor.initFiveSensors();

  lcd.clear(); //LCD instructions:
    lcd.gotoXY(0,0);
    lcd.print("place on");
    lcd.gotoXY(0,1);
    lcd.print("linPresA");
    
    sansSpeak();
    
  buttonA.waitForPress(); //wait for button A to start calibration
    lcd.clear();
    delay(100);
    
  while(teller<100){  //calibration
    linesensor.calibrate();
    teller = teller + 1;
    drive(200, -200);
    delay(50);
  }
    //standby for start:
  brake();

  lcd.clear();  //LCD instructions
    lcd.gotoXY(0,0);
    lcd.print("Press A");
    lcd.gotoXY(0,1);
    lcd.print("to start");
    sansTeaser();   

  buttonA.waitForPress(); //wait for button A to start
    lcd.clear();
    delay(100);

  lcd.clear();  //Ka-chow!
    lcd.gotoXY(1,0);
    lcd.print("Sans");
    lcd.gotoXY(0,1);
    lcd.print("Undrtale");
}

void loop() {
  sans(); //play megalovania
  
while (buzzer.isPlaying()){ //drive car while buzzer is playing
  int read_value = linesensor.readLine(linesensorValues); //PD-regulator
    int error = read_value - wanted_value;
    float speed_difference = (error * 0.5) + 1.2 * (error - last_error);
    float left_speed = top_speed + speed_difference;
    float right_speed = top_speed - speed_difference;
    left_speed = constrain(left_speed, -400, top_speed);
    right_speed = constrain(right_speed, -400, top_speed);
    last_error = error;
    drive(left_speed, right_speed); //output value between -400 and 400 for each motor to drive function
    }
}

//FUNCTIONS:///

void brake(){
//stop both motors
  analogWrite(10, 0);
  analogWrite(9, 0);
}

void drive(int leftSpeed, int rightSpeed){
//input: two values between -400 and 400, one for each motor
//-set the right direction on both wheels, HIGH or LOW
//-assign the right speed on both wheels, 0 to 255
  int leftMotor, rightMotor;
  if(leftSpeed < 0){
    digitalWrite(16, HIGH);
    leftMotor = map(leftSpeed, -400, 0, 255, 0);}
  else if(leftSpeed > 0){
    digitalWrite(16, LOW);
    leftMotor = map(leftSpeed, 0, 400, 0, 255);}
  if(rightSpeed < 0){
    digitalWrite(15, HIGH);
    rightMotor = map(rightSpeed, -400, 0, 255, 0);}
  else if(rightSpeed > 0){
    digitalWrite(15, LOW);
    rightMotor = map(rightSpeed, 0, 400, 0, 255);}
    
//output correct speed to each motor
  analogWrite(10, leftMotor);
  analogWrite(9, rightMotor);
}

void sans(){  //play megalovania
   buzzer.play("!L16 V15 /*part one*/ d16d16>d8a6r32g#8g8f8d16f16g16 c16c16>d8a6r32g#8g8f8d16f16g16 <b16<b16>d8a6r32g#8g8f8d16f16g16 <a#16<a#16>d8a6r32g#8g8f8d16f16g16 d16d16>d8a6r32g#8g8f8d16f16g16 c16c16>d8a6r32g#8g8f8d16f16g16 <b16<b16>d8a6r32g#8g8f8d16f16g16 <a#16<a#16>d8a6r32g#8g8f8d16f16g16 /*part 2*/ f8f16f16r16f16r16f8d16r16d4. f8f16f16r16g16r16g#8g32g#32g16d16f16g16r8 f8f16f16r16g16r16g#16r16a16b16r16b8. >c8>c8>c16g16>c16b2 a8a16a16r16a16r16a8g16r16g4. a8a8a16a16r16g16r16a16r16>d8a16g8 >d8a8g8f8>c8g8f8e8 b8d16e8f8r16>c2 r2f16d16f16g16g#16g16f16d16 g#32g32d16f8g2r16g#8a16 >c16r16a16g#16g16f16d16e16f8g8e8>c8  >c#8g#16r16g#16g16f16g2 d8e8f8>f8>e4>d4 >e4>f4>g4>e4 >a2>a16>g#16>g16>f#16>f16>e16>d#16>d16 >c#1");}

void sansSpeak(){ //play random sounds to sound like sans speaking
  buzzer.play("!L16 V15 d128 d128 d128 r64 d128 r8 d128 d128 r16 d128");}

void sansTeaser(){  //play the first da da da in megalovania
  buzzer.play("!L16 V15 d16 d16 >d8");}
